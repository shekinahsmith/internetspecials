////
// Foundation Grid - RV
////

////
// The foundation grid has been modified to be RV specific. For complete documentation visit test.rvcreative.com/frontend-tools/foundation/ (to view, you'll need to gasmask test.rvcreative.com)
////



@import "global-rv";

// -------------------------------------------------------------------------------------------
// @variables
// -------------------------------------------------------------------------------------------
$last-child-float: $opposite-direction !default;


// -------------------------------------------------------------------------------------------
// Grid Functions
// -------------------------------------------------------------------------------------------

// Deprecated: We'll drop support for this in 5.1, use grid-calc()
@function gridCalc($colNumber, $totalColumns) {
	@warn "gridCalc() is deprecated, use grid-calc()";
	@return grid-calc($colNumber, $totalColumns);
}

// @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
	@function grid-calc($colNumber, $totalColumns) {
	@return percentage(($colNumber / $totalColumns));
}


// -------------------------------------------------------------------------------------------
// @mixins
// -------------------------------------------------------------------------------------------

// For creating container, nested, and collapsed rows.
//
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
// ----------------------------------------------------------------------------

@mixin grid-row($behavior: false) {

	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest {
		width: auto;
		margin-#{$default-float}: -($column-gutter/2);
		margin-#{$opposite-direction}: -($column-gutter/2);
		margin-top: 0;
		margin-bottom: 0;
		max-width: none;
	}

	// Remove small and medium breakpoints - use @include grid-row(nest); to include a nested row
	@else if $behavior == remove-small-and-medium-breakpoints-nest {
		width: auto;
		margin-#{$default-float}: -($column-gutter/2);
		margin-#{$opposite-direction}: -($column-gutter/2);
		margin-top: 0;
		margin-bottom: 0;
		max-width: none;
		min-width: 0;
	}

	// use @include grid-row(collapse); to collapsed a container row margins
	@else if $behavior == collapse {
		width: 100%;
		margin: 0;
		max-width: $row-width;
	}

	// use @include grid-row(nest-collapse); to collapse outer margins on a nested row
	@else if $behavior == nest-collapse {
		width: auto;
		margin: 0;
		max-width: none;
	}

	// Fixed row width
	@else if $behavior == desktop-fixed-row-widths {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		margin-top: 0;
		margin-bottom: 0;
		width: 100%;

		// Medium row
		@media #{$medium-up} {
			width: $row-width-medium;
		}

		// Large row
		@media #{$large-up} {
			width: $row-width-large;
		}

		// xLarge row
		@media #{$xlarge-up} {
			width: $row-width-xlarge;
		}
	}

	// Fixed row width, Remove small and medium breakpoints
	@else if $behavior == desktop-fixed-row-widths-and-remove-small-and-medium-breakpoints {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		margin-top: 0;
		margin-bottom: 0;
		width: $row-width-large;

		// xLarge row
		@media #{$xlarge-up} {
			width: $row-width-xlarge;
		}
	}
	
	// Remove small and medium breakpoints
	@else if $behavior == remove-small-and-medium-breakpoints {
		width: 100%;
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		margin-top: 0;
		margin-bottom: 0;
		max-width: $row-width;
		min-width: $row-width-large;
	}

	// use @include grid-row; to use a container row
	@else {
		width: 100%;
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		margin-top: 0;
		margin-bottom: 0;
		max-width: $row-width;
	}

	// Clearfix for all rows
	@include clearfix();

} // END @mixin grid-row($behavior: false)


// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
// ----------------------------------------------------------------------------

@mixin grid-column(
	$columns:false,
	$last-column:false,
	$center:false,
	$offset:false,
	$push:false,
	$pull:false,
	$collapse:false,
	$float:true,
	$position:false
) {

	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull {
		position: relative;
	}

	// If collapsed, get rid of gutter padding
	@if $collapse {
		padding-left: 0;
		padding-right: 0;
	}

	// Gutter padding whenever a column isn't set to collapse
	// (use $collapse:null to do nothing)
	@else if $collapse == false {
		padding-left: ($column-gutter / 2);
		padding-right: ($column-gutter / 2);
	}

	// If a column number is given, calculate width
	@if $columns {
		width: grid-calc($columns, $total-columns);

		// If last column, float naturally instead of to the right
		@if $last-column { 
			float: $opposite-direction; 
		}
	}

	// Source Ordering, adds left/right depending on which you use.
	@if $push { 
		#{$default-float}: grid-calc($push, $total-columns); 
		#{$opposite-direction}: auto; 
	}
	@if $pull { 
		#{$opposite-direction}: grid-calc($pull, $total-columns); 
		#{$default-float}: auto; 
	}

	@if $float {
		@if $float == left or $float == true { 
			float: $default-float; 
		}
		@else if $float == right { 
			float: $opposite-direction; 
		}
		@else { 
			float: none; 
		}
	}

	// If centered, get rid of float and add appropriate margins
	@if $center {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		float: none;
	}

	// If offset, calculate appropriate margins
	@if $offset { 
		margin-#{$default-float}: grid-calc($offset, $total-columns) !important; 
	}

} // END @mixin grid-column


// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
// ----------------------------------------------------------------------------

@mixin grid-html-classes($size) {

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-push-#{$i} {
			@include grid-column($push:$i, $collapse:null, $float:false);
		}
		.#{$size}-pull-#{$i} {
			@include grid-column($pull:$i, $collapse:null, $float:false);
		}
	}

	.column,
	.columns { 
		@include grid-column($columns:false, $position:true); 
	}

	@for $i from 1 through $total-columns {
		.#{$size}-#{$i} { 
			@include grid-column($columns:$i,$collapse:null,$float:false); 
		}
	}

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-offset-#{$i} { 
			@include grid-column($offset:$i, $collapse:null,$float:false); 
		}
	}

	.#{$size}-reset-order {
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		left: auto;
		right: auto;
		float: $default-float;
	}

	.column.#{$size}-centered,
	.columns.#{$size}-centered { 
		@include grid-column($center:true, $collapse:null, $float:false); 
	}

	.column.#{$size}-uncentered,
	.columns.#{$size}-uncentered {
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		float: $default-float;
	}

	// Fighting [class*="column"] + [class*="column"]:last-child
	.column.#{$size}-centered:last-child,
	.columns.#{$size}-centered:last-child{
		float: none;
	}

	// Fighting .column.<previous-size>-centered:last-child
	.column.#{$size}-uncentered:last-child,
	.columns.#{$size}-uncentered:last-child {
		float: $default-float;
	}

	.column.#{$size}-uncentered.opposite,
	.columns.#{$size}-uncentered.opposite {
		float: $opposite-direction;
	}

	.row {
		&.#{$size}-collapse {
			> .column,
			> .columns { 
				@include grid-column($collapse:true, $float:false); 
			}

			.row {
				margin-left:0; 
				margin-right:0;
			}
		}

		&.#{$size}-uncollapse {
			> .column,
			> .columns {
				@include grid-column;
			}
		}
	}
	
} // END @mixin grid-html-classes($size)


// -------------------------------------------------------------------------------------------
// Export CSS
// -------------------------------------------------------------------------------------------

// Export grid
// ----------------------------------------------------------------------------
@include exports("grid") {

	// Export html grid classes
	@if $include-html-grid-classes {

		// Add fixed row widths
		@if $include-fixed-row-widths {

			// Add fixed row widths, Remove small and medium breakpoints
			@if $remove-small-and-medium-breakpoints {
				.row {
					@include grid-row($behavior: desktop-fixed-row-widths-and-remove-small-and-medium-breakpoints );

					&.collapse {
						> .column,
						> .columns { 
								@include grid-column($collapse:true, $float:false); 
						}

						.row {
							margin-left:0; 
							margin-right:0;
						}
					}

					.row { 
						@include grid-row($behavior:remove-small-and-medium-breakpoints-nest );
						&.collapse { 
							@include grid-row($behavior:nest-collapse); 
						}
					}
				}
			} // END @if $remove-small-and-medium-breakpoints

			// Add fixed row widths
			@else {
				.row {
					@include grid-row($behavior: desktop-fixed-row-widths);

					&.collapse {
						> .column,
						> .columns { 
								@include grid-column($collapse:true, $float:false); 
						}

						.row {
							margin-left:0; 
							margin-right:0;
						}
					}

					.row { 
						@include grid-row($behavior:nest);
						&.collapse { 
							@include grid-row($behavior:nest-collapse); 
						}
					}
				}
			}

		} // END @if $include-fixed-row-widths


		// Add Fluid row widths, Remove small and medium breakpoints
		@else if $remove-small-and-medium-breakpoints {

			.row {
				@include grid-row($behavior:remove-small-and-medium-breakpoints);

				&.collapse {
					> .column,
					> .columns { 
							@include grid-column($collapse:true, $float:false); 
					}

					.row {
						margin-left:0; 
						margin-right:0;
					}
				}

				.row { 
					@include grid-row($behavior:remove-small-and-medium-breakpoints-nest);
					&.collapse { 
						@include grid-row($behavior:nest-collapse); 
					}
				}
			}
		}

		// Add Fluid row widths
		@else {
			.row {
				@include grid-row;

				&.collapse {
					> .column,
					> .columns { 
							@include grid-column($collapse:true, $float:false); 
					}

					.row {
						margin-left:0; 
						margin-right:0;
					}
				}

				.row { 
					@include grid-row($behavior:nest);
					&.collapse { 
						@include grid-row($behavior:nest-collapse); 
					}
				}
			}
		}

		// Add IE8 row
		@if $include-ie8-support {

			// Add IE8 fixed width row
			@if $include-fixed-row-widths {
				.ie8 {

					.row {
						max-width: auto;
						width: $row-width-large;

						.row {
							max-width: none;
							width: auto;
						}

						.row.collapse {
							max-width: none;
							width: auto;
						}
					}
				}
			}

			// Add IE fluid width row
			@else {
				.ie8 {

					.row {
						max-width: $row-width;
						min-width: $row-width-large;
						width: auto;

						.row {
							max-width: none;
							min-width: 0;
							width: auto;
						}

						.row.collapse {
							max-width: none;
							width: auto;
						}
					}
				}
			}
		}

		.column,
		.columns { @include grid-column($columns:$total-columns); }

		[class*="column"] + [class*="column"]:last-child { 
			float: $last-child-float; 
		}

		[class*="column"] + [class*="column"].end { 
			float: $default-float; 
		}

		// Small grid classes
		// -------------------------------------------------------------
		@if $remove-small-and-medium-breakpoints {
			// Leave small classes out
		} @else {
			@media #{$small-up} {
				@include grid-html-classes($size:small);
			}

			// Add IE8 small grid classes
			@if $include-ie8-support {
				.ie8 {
					@include grid-html-classes($size:small);
				}
			}
		}

		// Medium grid classes
		// -------------------------------------------------------------
		@if $remove-small-and-medium-breakpoints {
			// Leave medium classes out
		} @else {

			@if $include-fixed-row-widths {
				// Medium grid classes for fixed row widths
				@media #{$medium-up} {
					@include grid-html-classes($size:medium);
					
					// Old push and pull classes
					@for $i from 0 through $total-columns - 1 {
						.push-#{$i} {
							@include grid-column($push:$i, $collapse:null, $float:false);
						}
						.pull-#{$i} {
							@include grid-column($pull:$i, $collapse:null, $float:false);
						}
					}
				}
			} @else {
				// Default medium grid classes
				@media #{$medium-up} {
					@include grid-html-classes($size:medium);
					
					// Old push and pull classes
					@for $i from 0 through $total-columns - 1 {
						.push-#{$i} {
							@include grid-column($push:$i, $collapse:null, $float:false);
						}
						.pull-#{$i} {
							@include grid-column($pull:$i, $collapse:null, $float:false);
						}
					}
				}
			} // END @if $include-fixed-row-widths

			// Add IE8 medium grid classes
			@if $include-ie8-support {
				.ie8 {
					@include grid-html-classes($size:medium);
					
					// Old push and pull classes
					@for $i from 0 through $total-columns - 1 {
						.push-#{$i} {
							@include grid-column($push:$i, $collapse:null, $float:false);
						}
						.pull-#{$i} {
							@include grid-column($pull:$i, $collapse:null, $float:false);
						}
					}
				}
			}

		}

		// Large grid classes
		// -------------------------------------------------------------

		// Large grid classes without small and medium breakpoints
		@if $remove-small-and-medium-breakpoints {

			@include grid-html-classes($size:large);
				
			@for $i from 0 through $total-columns - 1 {
				.push-#{$i} {
					@include grid-column($push:$i, $collapse:null, $float:false);
				}
				.pull-#{$i} {
					@include grid-column($pull:$i, $collapse:null, $float:false);
				}
			}
		} 

		// Default large grid classes
		@else {

			@media #{$large-up} {
				@include grid-html-classes($size:large);
				
				@for $i from 0 through $total-columns - 1 {
					.push-#{$i} {
						@include grid-column($push:$i, $collapse:null, $float:false);
					}
					.pull-#{$i} {
						@include grid-column($pull:$i, $collapse:null, $float:false);
					}
				}
			}

			// Add IE8 large grid classes
			@if $include-ie8-support {
				.ie8 {
					@include grid-html-classes($size:large);
					
					@for $i from 0 through $total-columns - 1 {
						.push-#{$i} {
							@include grid-column($push:$i, $collapse:null, $float:false);
						}
						.pull-#{$i} {
							@include grid-column($pull:$i, $collapse:null, $float:false);
						}
					}
				}
			}
		}

	} // END @if $include-html-grid-classes

	// xLarge grid classes
	// -------------------------------------------------------------
	@media #{$xlarge-up} {
		@include grid-html-classes($size:xlarge);
	}

	// Add IE8 xlarge grid classes
	@if $include-ie8-support {
		.ie8 {
			@include grid-html-classes($size:xlarge);
		}
	}

	// xxLarge grid classes
	// -------------------------------------------------------------
	@if $include-xxl-html-grid-classes {
	
		@media #{$xxlarge-up} {
			@include grid-html-classes($size:xxlarge);
		}

		// Add IE8 xxlarge grid classes
		@if $include-ie8-support {
			.ie8 {
				@include grid-html-classes($size:xxlarge);
			}
		}

	} // END @if $include-xxl-html-grid-classes

} // END @include exports("grid")
